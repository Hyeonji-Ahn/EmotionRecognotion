import numpy as np
from scipy.stats import gaussian_kde
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def plot_3D_kde_new(vectors):
    # Create a 3D plot
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')

    # Iterate through each vector in the list of vectors and plot the KDE
    for idx, data in enumerate(vectors):
        numbers_without_outliers, xval = data
       
        # If the dataset has less than 2 points, skip this iteration
        if len(numbers_without_outliers) < 2:
            continue
       
        # Reshape the data appropriately
        dataset = np.array(numbers_without_outliers).reshape(1, -1)

        # Create a kernel density estimate
        kde = gaussian_kde(dataset)

        # Create a range of values to evaluate the KDE
        x_eval = np.linspace(min(numbers_without_outliers), max(numbers_without_outliers), 1000)

        # Evaluate the KDE at the specified values
        density = kde(x_eval)

        # Create a corresponding y value for plotting (use the index of the vector to separate the plots)
        y_val = [idx] * len(x_eval)

        # Plot the KDE
        ax.plot(x_eval, y_val, density, label=f"Vector {idx}")

    ax.set_xlabel('Value')
    ax.set_ylabel('Vector')
    ax.set_zlabel('Density')
    plt.show()

def plot_3D_kde(vectors):
    # Create a 3D plot
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')

    # Iterate through each vector in the list of vectors and plot the KDE
    for vector in vectors:
        # Create a kernel density estimate
        print(len(vector))
        kde = gaussian_kde(vector)

        # Create a range of values to evaluate the KDE
        x_eval = np.linspace(min(vector), max(vector), 1000)

        # Evaluate the KDE at the specified values
        density = kde(x_eval)

        # Create a corresponding y value for plotting (this is just the index of the vector to separate the plots)
        y_val = [len(vectors)] * len(x_eval)

        # Plot the KDE
        ax.plot(x_eval, y_val, density, label=f"Vector {len(vectors)}")
        len(vectors) - 1

    ax.set_xlabel('Value')
    ax.set_ylabel('Vector')
    ax.set_zlabel('Density')
    ax.legend()

    plt.show()

# Example usage
vectors = []

mainDir = r"C:\Users\ahj28\Desktop\Garcia DISC Data\ControlsAfterAugust\Ketamin\1b"
pp = mainDir + "/EyeBlack"
image_pattern = pp+'/*.png'

result_file = pp + "/result.dic"
point_list = []


with open(result_file) as f:
        res = f.readlines()[2:-1]
        for line in res: #per frame
            val = line.split('\t')
            point = []
            for pair in val[1:-1]: 
                (x, y) = [float(x) for x in pair.split(',')]
                point.append(np.array([np.float32(x), np.float32(y)]))
            point_list.append(np.array(point)) 
        f.close()

numPoint = 0
for i in range(len(point_list)-1):
    numPoint = 0
    curFrame = point_list[0];
    nextFrame = point_list[i];
    distSum = 0;
    dxs = []
    dys = []
    disp=[]
    xval = []
    threshold = 0.1
    for coor in range(len(curFrame)):
        x = nextFrame[coor][0]
        y = nextFrame[coor][1]
        numPoint+=1
        dx = nextFrame[coor][0] - curFrame[coor][0]
        dy = nextFrame[coor][1] - curFrame[coor][1]
        disp.append( (dx ** 2 + dy **2) ** 0.5 )
        xval.append(coor)
    threshold = 0.1
    filtered_numbers = [num for num in disp if num >= threshold ]
    sorted_numbers = sorted(filtered_numbers)
    outlier_percent = 15
    k = int(len(sorted_numbers) * outlier_percent / 100)
    # Exclude the k largest numbers
    numbers_without_outliers = sorted_numbers[:-k]
    vectors.append([numbers_without_outliers,xval])
    print(i,"th total points:",(numPoint))
plot_3D_kde_new(vectors)